TODO
Email daily update (opt out to weekly or no update) - check this works at 9am email

deep research papers that are scraped
add to feed









PERSONAL FEED - find API like semantic scholar
graphical abstract - more or less imaes 


refactor code - GPT codex

COMMUNITY
share tile to community with your comments X style which other people can comment on so its a new tile with the paper tile in subsection in community
share to other platfroms and email


SEARCH
improve search speed load - WAITING FOR API KEY
only 12 paper tiles want more add button to load more 

IMPORT PAPERS WITH PLUGIN


DEEP RESEARCH AGENTS FOR METHODS - human in loop - CHECK COST OF HOSTED GEMINI
npm run recent-prompts

paste into gemini deep research
run follwup message
  list the four papers in pure JSON (no surrounding text). It should be a single JSON array where each   

  entry is an object with these keys: `title`, `authors` (string or null), `source`, `date`, `url`. Example:                                                                                                            

  [                                                                                                         

    {                                                                                                       

      "title": "Paper title",                                                                               

      "authors": "Author list (or null)",                                                                   

      "source": "Source name",                                                                              

      "date": "YYYY-MM-DD",                                                                                 

      "url": "https://..."                                                                                  

    }                                                                                                       

  ]                                                                                                                                                                                                               

  Only return the JSON array.  

npm run deep-prompts

paste into gemini deep research
run follwup message
  Summarise our deep research findings as a JSON array. Each element must match this schema exactly (no     
  extra keys, no Markdown):                                                                                 
                                                                                                            
  [                                                                                                         
    {                                                                                                       
      "paperId": "<stable id or slug>",                                                                     
      "paperTitle": "<exact title>",                                                                        
      "paperAuthors": "<authors or null>",                                                                  
      "paperUrl": "<primary URL or null>",                                                                  
      "summary": "<headline verdict>",                                                                      
      "analysis": {                                                                                         
        "stage": "ai_research",                                                                             
        "lastUpdated": "<YYYY-MM-DD>",                                                                      
        "reviewers": ["AI Research Desk"],                                                                  
        "paper": {                                                                                          
          "title": "<exact title>",                                                                         
          "authors": "<authors or null>",                                                                   
          "venue": "<venue or null>",                                                                       
          "doi": "<doi or null>"                                                                            
        },                                                                                                  
        "verdict": {                                                                                        
          "grade": "A–F letter",                                                                            
          "confidence": "High|Medium|Low",                                                                  
          "mainMessage": "<1–2 sentence summary>",                                                          
          "successProbability": 0.0-1.0,                                                                    
          "timeToFirstResult": "<string>",                                                                  
          "totalCost": "<string>",                                                                          
          "skillCeiling": "<string>",                                                                       
          "confidenceLevel": "ai_inferred"                                                                  
        },                                                                                                  
        "feasibilityQuestions": [                                                                           
          {                                                                                                 
            "id": "<slug>",                                                                                 
            "question": "<question>",                                                                       
            "weight": 1-3,                                                                                  
            "category": "<category>",                                                                       
            "helper": "<short guidance or null>"                                                            
          }                                                                                                 
        ],                                                                                                  
        "criticalPath": [                                                                                   
          {                                                                                                 
            "id": "<slug>",                                                                                 
            "phase": "<phase name>",                                                                        
            "duration": "<string>",                                                                         
            "cost": "<string>",                                                                             
            "riskLevel": "Low|Medium|High",                                                                 
            "dependencies": ["<phase id>", "..."],                                                          
            "requirements": ["...", "..."],                                                                 
            "outputs": ["...", "..."],                                                                      
            "blockers": [                                                                                   
              {                                                                                             
                "severity": "critical|moderate|minor",                                                      
                "issue": "<primary blocker>",                                                               
                "mitigation": "<recommended fix>",                                                          
                "verificationStatus": "verified|inferred|uncertain"                                         
              }                                                                                             
            ]                                                                                               
          }                                                                                                 
        ],                                                                                                  
        "evidenceBase": {                                                                                   
          "strongEvidence": [                                                                               
            {                                                                                               
              "claim": "<finding>",                                                                         
              "source": "<citation>",                                                                       
              "verificationStatus": "verified|inferred|uncertain",                                          
              "notes": "<optional>"                                                                         
            }                                                                                               
          ],                                                                                                
          "gaps": [                                                                                         
            {                                                                                               
              "concern": "<gap>",                                                                           
              "impact": "<impact>",                                                                         
              "severity": "critical|moderate|minor",                                                        
              "resolvableWithExpertAnalysis": true|false                                                    
            }                                                                                               
          ],                                                                                                
          "assumptions": ["<assumption>", "..."]                                                            
        },                                                                                                  
        "expertEnhancements": {                                                                             
          "authorContacted": false,                                                                         
          "datasetsVerified": [],                                                                           
          "protocolClarifications": [],                                                                     
          "additionalResources": [],                                                                        
          "turnaround": "<string or null>"                                                                  
        }                                                                                                   
      }                                                                                                     
    }                                                                                                       
  ]                                                                                                         
                                                                                                            
  Return **only** this JSON array (no commentary, no Markdown).  
paste output

npm run ingest-analyses


