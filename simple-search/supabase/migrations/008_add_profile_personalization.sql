-- Add profile personalization fields for LLM-generated enrichments
ALTER TABLE public.profiles
ADD COLUMN IF NOT EXISTS profile_personalization JSONB DEFAULT '{
  "topic_clusters": [],
  "author_focus": [],
  "venue_focus": [],
  "filters": {
    "recency_days": 1,
    "publication_types": ["journal", "conference", "preprint"],
    "include_preprints": true
  }
}'::jsonb,
ADD COLUMN IF NOT EXISTS last_profile_enriched_at TIMESTAMPTZ,
ADD COLUMN IF NOT EXISTS profile_enrichment_version TEXT;

COMMENT ON COLUMN public.profiles.profile_personalization IS 'Structured personalization facets produced by the profile LLM (clusters, authors, venues, filters).';
COMMENT ON COLUMN public.profiles.last_profile_enriched_at IS 'Timestamp of the most recent LLM-driven profile enrichment run.';
COMMENT ON COLUMN public.profiles.profile_enrichment_version IS 'Identifier for the prompt/model version used to generate the profile personalization.';

-- Track enrichment job executions for auditing and scheduling
CREATE TABLE IF NOT EXISTS public.profile_enrichment_jobs (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  status TEXT NOT NULL DEFAULT 'pending',
  source TEXT NOT NULL DEFAULT 'manual_refresh',
  payload JSONB,
  result JSONB,
  error TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  started_at TIMESTAMPTZ,
  completed_at TIMESTAMPTZ
);

ALTER TABLE public.profile_enrichment_jobs ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their profile enrichment jobs" ON public.profile_enrichment_jobs
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their profile enrichment jobs" ON public.profile_enrichment_jobs
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their profile enrichment jobs" ON public.profile_enrichment_jobs
  FOR UPDATE USING (auth.uid() = user_id);

CREATE INDEX idx_profile_enrichment_jobs_user_id ON public.profile_enrichment_jobs(user_id);
CREATE INDEX idx_profile_enrichment_jobs_status ON public.profile_enrichment_jobs(status);
CREATE INDEX idx_profile_enrichment_jobs_created_at ON public.profile_enrichment_jobs(created_at DESC);

COMMENT ON TABLE public.profile_enrichment_jobs IS 'Queue of profile enrichment executions used to drive LLM personalization refreshes.';
COMMENT ON COLUMN public.profile_enrichment_jobs.status IS 'pending, processing, succeeded, or failed.';
COMMENT ON COLUMN public.profile_enrichment_jobs.source IS 'Trigger origin, e.g., manual_refresh, daily_refresh, signup.';

ALTER TABLE public.profile_enrichment_jobs
  ADD CONSTRAINT profile_enrichment_jobs_status_check
  CHECK (status IN ('pending', 'processing', 'succeeded', 'failed'));
