-- Create user_favourites table to store user's favourite feed items
CREATE TABLE IF NOT EXISTS public.user_favourites (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  feed_item_id BIGINT NOT NULL REFERENCES public.feed_items(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,

  -- Ensure users can't favourite the same item twice
  UNIQUE(user_id, feed_item_id)
);
-- Enable Row Level Security (RLS) for user_favourites
ALTER TABLE public.user_favourites ENABLE ROW LEVEL SECURITY;
-- Create RLS policies for user_favourites table
CREATE POLICY "Users can view their own favourites"
ON public.user_favourites FOR SELECT
USING (auth.uid() = user_id);
CREATE POLICY "Users can create their own favourites"
ON public.user_favourites FOR INSERT
WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can delete their own favourites"
ON public.user_favourites FOR DELETE
USING (auth.uid() = user_id);
-- Create indexes for better performance
CREATE INDEX idx_user_favourites_user_id ON public.user_favourites(user_id);
CREATE INDEX idx_user_favourites_feed_item_id ON public.user_favourites(feed_item_id);
CREATE INDEX idx_user_favourites_created_at ON public.user_favourites(created_at DESC);
-- Create composite index for faster favourite status checks
CREATE INDEX idx_user_favourites_user_item ON public.user_favourites(user_id, feed_item_id);
